{"config":{"indexing":"full","lang":["en"],"min_search_length":3,"prebuild_index":false,"separator":"[\\s\\-]+"},"docs":[{"location":"","text":"","title":"Home"},{"location":"about/","text":"Welcome to My Notes This is an open space where I drop notes on technical subjects that at one point in time were usefull to me. I do not own the information in this page and it is saved here for my own future reference. Feel free to contact me here if you have any questions, suggestions or complains.","title":"Welcome to My Notes"},{"location":"about/#welcome-to-my-notes","text":"This is an open space where I drop notes on technical subjects that at one point in time were usefull to me. I do not own the information in this page and it is saved here for my own future reference. Feel free to contact me here if you have any questions, suggestions or complains.","title":"Welcome to My Notes"},{"location":"bash-notes/","text":"Bash shell tips and trics Hiding top panel in elementaryOS To hide the top panel in elementaryOS the shell script below have to be saved to a text file and named withouth any file extension: #!/bin/bash result=`ps aux | grep -i \"io.elementary.wingpanel\" | grep -v \"grep\" | wc -l` if [ $result -ge 1 ] then killall io.elementary.wingpanel &> /dev/null; killall io.elementary.wingpanel &> /dev/null; killall io.elementary.wingpanel &> /dev/null; else io.elementary.wingpanel &> /dev/null & fi Change the file permission so it can be executed by the user: chmod 755 hide_top_panel Save the file to /bin . Add a custom shortcut to elementaryOS. Go to System Settings -> Hardware -> Keyboard -> Shortcuts tab -> Custom. Select a keyboard shortcut of you preference and use the same name as the file name in /bin .","title":"Bash shell tips and trics"},{"location":"bash-notes/#bash-shell-tips-and-trics","text":"","title":"Bash shell tips and trics"},{"location":"bash-notes/#hiding-top-panel-in-elementaryos","text":"To hide the top panel in elementaryOS the shell script below have to be saved to a text file and named withouth any file extension: #!/bin/bash result=`ps aux | grep -i \"io.elementary.wingpanel\" | grep -v \"grep\" | wc -l` if [ $result -ge 1 ] then killall io.elementary.wingpanel &> /dev/null; killall io.elementary.wingpanel &> /dev/null; killall io.elementary.wingpanel &> /dev/null; else io.elementary.wingpanel &> /dev/null & fi Change the file permission so it can be executed by the user: chmod 755 hide_top_panel Save the file to /bin . Add a custom shortcut to elementaryOS. Go to System Settings -> Hardware -> Keyboard -> Shortcuts tab -> Custom. Select a keyboard shortcut of you preference and use the same name as the file name in /bin .","title":"Hiding top panel in elementaryOS"},{"location":"conda-notes/","text":"Conda tips and trics Conda is an open source package management system and environment management system that runs on Windows, macOS, and Linux. Conda quickly installs, runs and updates packages and their dependencies. Conda easily creates, saves, loads and switches between environments on your local computer. It was created for Python programs, but it can package and distribute software for any language. Managing Conda conda --version conda info conda -v conda update conda updates conda conda list list installed packages conda update -n hero --all updates all conda packages in the 'hero' environment conda update --all same as above in the current directory Conda environments conda env list conda activate myenv conda deactivate myenv conda remove --name myenv --all conda create --name myclone --clone myenv conda info --envs Creating environments conda create --name myenv conda create -n myenv python=3.6 with a specific python version conda create -n myenv scipy with packages conda create -n myenv scipy=0.15.0 with specific package versions conda env export > environment.yml export the yml conda env create -f environment.yml create and environment from yml file Installing packages conda search pandas searching for the package in the repositories conda install scipy install the package in the current environment conda install --name myenv scipy to install it in myenv environment conda install scipy=0.15.0 install a specific version of a package","title":"Conda"},{"location":"conda-notes/#conda-tips-and-trics","text":"Conda is an open source package management system and environment management system that runs on Windows, macOS, and Linux. Conda quickly installs, runs and updates packages and their dependencies. Conda easily creates, saves, loads and switches between environments on your local computer. It was created for Python programs, but it can package and distribute software for any language.","title":"Conda tips and trics"},{"location":"conda-notes/#managing-conda","text":"conda --version conda info conda -v conda update conda updates conda conda list list installed packages conda update -n hero --all updates all conda packages in the 'hero' environment conda update --all same as above in the current directory","title":"Managing Conda"},{"location":"conda-notes/#conda-environments","text":"conda env list conda activate myenv conda deactivate myenv conda remove --name myenv --all conda create --name myclone --clone myenv conda info --envs","title":"Conda environments"},{"location":"conda-notes/#creating-environments","text":"conda create --name myenv conda create -n myenv python=3.6 with a specific python version conda create -n myenv scipy with packages conda create -n myenv scipy=0.15.0 with specific package versions conda env export > environment.yml export the yml conda env create -f environment.yml create and environment from yml file","title":"Creating environments"},{"location":"conda-notes/#installing-packages","text":"conda search pandas searching for the package in the repositories conda install scipy install the package in the current environment conda install --name myenv scipy to install it in myenv environment conda install scipy=0.15.0 install a specific version of a package","title":"Installing packages"},{"location":"git-notes/","text":"Git tips and tricks Basic commands git --version checks the version of git installed git status to check status of your repo git init to initialize a repo. Run once per repo git add file1 file2 adds your file(s) to the 'stage' area git add . will stages all changes at once gir rm --cached file1 to unstaged the file git commit -m \"my message\" to commit the files in the stage area to the repo(.git folder). git log log of commits for the repo git log --oneline one liner log git push -u origin main to push the changes to the remote repo git pull origin main Linking local repo to remote repo Create a new repo on github.com. Do not add a README or License just yet. Open a terminal at your local project git init -b main will initialize the local direcotry as a Git repo echo \"# project_palmer-penguins\" >> README.md create the README.md file git add README.md Add the file in your local repo. git commit -m \"First commit\" Commit the file git remote add origin <REMOTE_URL> Links you local directory to you github repo git push origin main Push the changes in your local repository to GitHub.com. Configuring global variables git config --global user.name \"User Name\" git config user.name to check user name configured git config --global user.email \"user@email.com\" git config user.email to check your email Working with branches git branch to list all branches git checkout <branch-name> to switch to branch Creating a new branch navigate to your local repo make sure local repo and remote repo are up to date run the following command to start a new branch: git checkout -b <your-new-branch-name> Your new branch is now created, but it\u2019s only available on your local machine. git push origin <your-new-branch-name> Push your new branch to the origin repository and work on the new one until you are ready for a push request Once your work is done you can merge your branch back into the main branch. Use git merge to merge the specified branch into the currently active branch. Just maake sure you are on the branch that we are merging into. See steps below Merging branches git checkout main switch back to the local main branch git pull origin main pull the remote main changes to the local main branch git merge <your-new-branch-name> merge your branch to the currently active branch git log --all --decorate --oneline --graph verify branch history (optional)","title":"Git"},{"location":"git-notes/#git-tips-and-tricks","text":"","title":"Git tips and tricks"},{"location":"git-notes/#basic-commands","text":"git --version checks the version of git installed git status to check status of your repo git init to initialize a repo. Run once per repo git add file1 file2 adds your file(s) to the 'stage' area git add . will stages all changes at once gir rm --cached file1 to unstaged the file git commit -m \"my message\" to commit the files in the stage area to the repo(.git folder). git log log of commits for the repo git log --oneline one liner log git push -u origin main to push the changes to the remote repo git pull origin main","title":"Basic commands"},{"location":"git-notes/#linking-local-repo-to-remote-repo","text":"Create a new repo on github.com. Do not add a README or License just yet. Open a terminal at your local project git init -b main will initialize the local direcotry as a Git repo echo \"# project_palmer-penguins\" >> README.md create the README.md file git add README.md Add the file in your local repo. git commit -m \"First commit\" Commit the file git remote add origin <REMOTE_URL> Links you local directory to you github repo git push origin main Push the changes in your local repository to GitHub.com.","title":"Linking local repo to remote repo"},{"location":"git-notes/#configuring-global-variables","text":"git config --global user.name \"User Name\" git config user.name to check user name configured git config --global user.email \"user@email.com\" git config user.email to check your email","title":"Configuring global variables"},{"location":"git-notes/#working-with-branches","text":"git branch to list all branches git checkout <branch-name> to switch to branch","title":"Working with branches"},{"location":"git-notes/#creating-a-new-branch","text":"navigate to your local repo make sure local repo and remote repo are up to date run the following command to start a new branch: git checkout -b <your-new-branch-name> Your new branch is now created, but it\u2019s only available on your local machine. git push origin <your-new-branch-name> Push your new branch to the origin repository and work on the new one until you are ready for a push request Once your work is done you can merge your branch back into the main branch. Use git merge to merge the specified branch into the currently active branch. Just maake sure you are on the branch that we are merging into. See steps below","title":"Creating a new branch"},{"location":"git-notes/#merging-branches","text":"git checkout main switch back to the local main branch git pull origin main pull the remote main changes to the local main branch git merge <your-new-branch-name> merge your branch to the currently active branch git log --all --decorate --oneline --graph verify branch history (optional)","title":"Merging branches"},{"location":"linux-notes/","text":"Linux tips and trics A small collection of notes about usefull linux commands. Archiving in linux tar - is an archiving program designed to store and extract files from an archive file known as tarfile to create it, move files you intend to bzip2 into a directory, for instance /home/user/test , and run the following command: tar -cjf tarfilename.tar.bz2 teste/ It will create (c), bzip2 (j), the files (f) in that directory teste/ into the tarfile tarfilename.tar.bz2 to extract a tarfile into a directory, simple run the following command tar \u2013xjf tarfilename.tar.bz2 teste/ It will extract (x) bzipped (j) files (f) in the tarfile back to the directory teste/","title":"Linux"},{"location":"linux-notes/#linux-tips-and-trics","text":"A small collection of notes about usefull linux commands.","title":"Linux tips and trics"},{"location":"linux-notes/#archiving-in-linux","text":"tar - is an archiving program designed to store and extract files from an archive file known as tarfile to create it, move files you intend to bzip2 into a directory, for instance /home/user/test , and run the following command: tar -cjf tarfilename.tar.bz2 teste/ It will create (c), bzip2 (j), the files (f) in that directory teste/ into the tarfile tarfilename.tar.bz2 to extract a tarfile into a directory, simple run the following command tar \u2013xjf tarfilename.tar.bz2 teste/ It will extract (x) bzipped (j) files (f) in the tarfile back to the directory teste/","title":"Archiving in linux"},{"location":"markdown-notes/","text":"Markdown and mkdocs notes Project documentation with Markdown. MkDocs MkDocs is a fast, simple and downright gorgeous static site generator that's geared towards building project documentation. Documentation source files are written in Markdown, and configured with a single YAML configuration file. Visit https://www.mkdocs.org/ for complete reference on mkdocs. Building the site That's looking good. You're ready to deploy the first pass of your MkLorum documentation. First build the documentation: mkdocs build This will create a new directory, named site. Take a look inside the directory: $ ls site about fonts index.html license search.html css img js mkdocs sitemap.xml Notice that your source documentation has been output as two HTML files named index.html and about/index.html . You also have various other media that's been copied into the site directory as part of the documentation theme. You even have a sitemap.xml file and mkdocs/search_index.json . If you're using source code control such as git you probably don't want to check your documentation builds into the repository. Add a line containing site/ to your .gitignore file. echo \"site/\" >> .gitignore Deploying your pages User Pages sites are not tied to a specific project, and the site files are deployed to the main branch in a dedicated repository named with the GitHub account name. Therefore, you need working copies of two repositories on our local system. For example, consider the following file structure: my-project/ mkdocs.yml docs/ username.github.io/ After making and verifying updates to your project you need to change directories to the orgname.github.io repository and call the mkdocs gh-deploy command from there: cd ../username.github.io/ mkdocs gh-deploy --config-file ../mkdocs.yml --remote-branch main Password protected pages This plugin allows you to have password protected articles and pages in MKdocs. The content is encrypted with AES-256 in Python using PyCryptodome, and decrypted in the browser with Crypto-JS.","title":"Markdown"},{"location":"markdown-notes/#markdown-and-mkdocs-notes","text":"Project documentation with Markdown.","title":"Markdown and mkdocs notes"},{"location":"markdown-notes/#mkdocs","text":"MkDocs is a fast, simple and downright gorgeous static site generator that's geared towards building project documentation. Documentation source files are written in Markdown, and configured with a single YAML configuration file. Visit https://www.mkdocs.org/ for complete reference on mkdocs.","title":"MkDocs"},{"location":"markdown-notes/#building-the-site","text":"That's looking good. You're ready to deploy the first pass of your MkLorum documentation. First build the documentation: mkdocs build This will create a new directory, named site. Take a look inside the directory: $ ls site about fonts index.html license search.html css img js mkdocs sitemap.xml Notice that your source documentation has been output as two HTML files named index.html and about/index.html . You also have various other media that's been copied into the site directory as part of the documentation theme. You even have a sitemap.xml file and mkdocs/search_index.json . If you're using source code control such as git you probably don't want to check your documentation builds into the repository. Add a line containing site/ to your .gitignore file. echo \"site/\" >> .gitignore","title":"Building the site"},{"location":"markdown-notes/#deploying-your-pages","text":"User Pages sites are not tied to a specific project, and the site files are deployed to the main branch in a dedicated repository named with the GitHub account name. Therefore, you need working copies of two repositories on our local system. For example, consider the following file structure: my-project/ mkdocs.yml docs/ username.github.io/ After making and verifying updates to your project you need to change directories to the orgname.github.io repository and call the mkdocs gh-deploy command from there: cd ../username.github.io/ mkdocs gh-deploy --config-file ../mkdocs.yml --remote-branch main","title":"Deploying your pages"},{"location":"markdown-notes/#password-protected-pages","text":"This plugin allows you to have password protected articles and pages in MKdocs. The content is encrypted with AES-256 in Python using PyCryptodome, and decrypted in the browser with Crypto-JS.","title":"Password protected pages"},{"location":"python-notes/","text":"Python tips and tricks A small collection of notes about python tricks. How to intall python packages in an offline server Want to install python libs and their dependencies offline? Follow these steps on a machine with the same os, network connected, and python installed: Online machine Create a requirements.txt file with similar content (Note - these are the libraries you wish to download): Flask==0.12 requests>=2.7.0 scikit-learn==0.19.1 numpy==1.14.3 pandas==0.22.0 One option for creating the requirements file is to use pip freeze > requirements.txt . This will list all libraries in your environment. Then you can go in to requirements.txt and remove un-needed ones. Execute command mkdir wheelhouse && pip download -r requirements.txt -d wheelhouse to download libs and their dependencies to directory wheelhouse Copy requirements.txt into wheelhouse directory Archive wheelhouse into wheelhouse.tar.gz with tar -zcf wheelhouse.tar.gz wheelhouse Offline machine Upload wheelhouse.tar.gz to your target machine: Execute tar -zxf wheelhouse.tar.gz to extract the files Execute pip install -r wheelhouse/requirements.txt --no-index --find-links wheelhouse to install the libs and their dependencies","title":"Python"},{"location":"python-notes/#python-tips-and-tricks","text":"A small collection of notes about python tricks.","title":"Python tips and tricks"},{"location":"python-notes/#how-to-intall-python-packages-in-an-offline-server","text":"Want to install python libs and their dependencies offline? Follow these steps on a machine with the same os, network connected, and python installed:","title":"How to intall python packages in an offline server"},{"location":"python-notes/#online-machine","text":"Create a requirements.txt file with similar content (Note - these are the libraries you wish to download): Flask==0.12 requests>=2.7.0 scikit-learn==0.19.1 numpy==1.14.3 pandas==0.22.0 One option for creating the requirements file is to use pip freeze > requirements.txt . This will list all libraries in your environment. Then you can go in to requirements.txt and remove un-needed ones. Execute command mkdir wheelhouse && pip download -r requirements.txt -d wheelhouse to download libs and their dependencies to directory wheelhouse Copy requirements.txt into wheelhouse directory Archive wheelhouse into wheelhouse.tar.gz with tar -zcf wheelhouse.tar.gz wheelhouse","title":"Online machine"},{"location":"python-notes/#offline-machine","text":"Upload wheelhouse.tar.gz to your target machine: Execute tar -zxf wheelhouse.tar.gz to extract the files Execute pip install -r wheelhouse/requirements.txt --no-index --find-links wheelhouse to install the libs and their dependencies","title":"Offline machine"}]}